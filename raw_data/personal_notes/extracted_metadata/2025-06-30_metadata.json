{
  "date": "2025-06-30",
  "note_type": "daily",
  "title": "Daily Note - 2025-06-30",
  "summary": "An incredibly productive day on the Collapsi project, transforming it into a standalone web application, integrating advanced AI features, and significantly improving code quality. Key accomplishments include a full client-side JavaScript port, MCTS improvements with ONNX support, and a complete AlphaZero-style training system.",
  "topics": [
    "web-architecture",
    "javascript-porting",
    "mcts-optimization",
    "alphazero",
    "onnx",
    "policy-value-consistency",
    "client-side-development",
    "game development",
    "machine learning"
  ],
  "projects": [
    "collapsi-web",
    "collapsi-alphazero",
    "hierarchical-notes"
  ],
  "people": [
    "Mark S. Ball"
  ],
  "institutions": [],
  "methods": [
    "Monte Carlo Tree Search (MCTS)",
    "AlphaZero-style training",
    "policy distillation",
    "temperature-based exploration",
    "client-side rendering",
    "parameter tuning"
  ],
  "tools": [
    "javascript",
    "onnx",
    "pytorch",
    "tailscale",
    "localStorage",
    "webstorage",
    "CUDA",
    "CLI",
    "JSON"
  ],
  "accomplishments": [
    "Refactored Collapsi to a standalone web architecture, removing backend dependency and running 100% client-side.",
    "Created complete JavaScript port of game logic (collapsi-game.js) and environment wrapper (collapsi-env.js).",
    "Implemented save/load system using localStorage and JSON.",
    "Extracted MCTS into a standalone module supporting PyTorch and ONNX.",
    "Created ONNX conversion script achieving 60-70% file size reduction.",
    "Integrated AI opponent into web UI using ONNX runtime.",
    "Improved UI with three-column layout and enlarged game board.",
    "Fixed a major MCTS performance issue (incorrect instance creation per move).",
    "Extracted common evaluation logic, reducing ~40 lines of duplicate code.",
    "Created a centralized state preparation helper function.",
    "Made PPO hyperparameters configurable via CLI.",
    "Built a complete AlphaZero-style training system.",
    "Implemented policy distillation from MCTS and temperature-based exploration.",
    "Improved CUDA detection and logging.",
    "Created proper session-based checkpoint management.",
    "Set up Tailscale for secure networking.",
    "Created hierarchical note template system (Daily → Weekly → Monthly).",
    "Documented all changes comprehensively in README and CLAUDE.md."
  ],
  "insights": [
    "Observed that policy loss can decrease while value loss remains high during AlphaZero training, suggesting policy might be memorizing MCTS patterns without true understanding, indicating a need for policy-value consistency.",
    "Identified that if the policy truly understands good moves, it should implicitly understand position values, and a persistent gap indicates potential for improvement.",
    "Recognized massive benefits of standalone web architecture: zero server costs, instant deployment on static hosts, better performance, offline capability, and simpler development workflow.",
    "Discovered that MCTS instantiation per move was a major performance bottleneck."
  ],
  "learning": [
    "Learned from various code review feedback on RL training patterns.",
    "Watched Mark S. Ball's Collapsi tutorial (integrated into UI).",
    "Discovered MCTS instantiation per move was a major performance bottleneck."
  ],
  "challenges": [],
  "future_work": [
    "Test the AlphaZero training with full 1 million episodes.",
    "Implement the policy-value consistency loss experiment.",
    "Create more sophisticated AI difficulty levels for the web UI."
  ],
  "metrics": {
    "onnx_file_size_reduction": "60-70%"
  },
  "papers": [],
  "file_path": "/home/artnoage/Projects/interactive_cv/raw_data/personal_notes/Daily Notes/2025-06-30.md",
  "extraction_date": "2025-07-05T11:51:25.296426",
  "extractor_version": "blueprint-v1.0",
  "document_type": "personal"
}